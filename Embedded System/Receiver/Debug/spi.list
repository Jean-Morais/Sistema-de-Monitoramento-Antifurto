
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001198  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080012c8  080012c8  000022c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001310  08001310  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001310  08001310  00003050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001310  08001310  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001310  08001310  00002310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001314  08001314  00002314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001318  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  08001368  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08001368  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000085c  00000000  00000000  00003079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002e8  00000000  00000000  000038d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00003bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000098  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010e40  00000000  00000000  00003d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001084  00000000  00000000  00014b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000581bf  00000000  00000000  00015bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006ddb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000800  00000000  00000000  0006ddf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0006e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	080012b0 	.word	0x080012b0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	080012b0 	.word	0x080012b0

08000170 <delay_ms>:
#include <stdio.h>

#define RC522_CS_Pin   (1 << 12)
#define RC522_RST_Pin (1 << 15)

void delay_ms(uint32_t ms) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < ms; i++) {
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00c      	b.n	8000198 <delay_ms+0x28>
		for (volatile uint32_t j = 0; j < 7200; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	f5b3 5fe1 	cmp.w	r3, #7200	@ 0x1c20
 8000190:	d3f8      	bcc.n	8000184 <delay_ms+0x14>
	for (uint32_t i = 0; i < ms; i++) {
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	3301      	adds	r3, #1
 8000196:	60fb      	str	r3, [r7, #12]
 8000198:	68fa      	ldr	r2, [r7, #12]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	429a      	cmp	r2, r3
 800019e:	d3ee      	bcc.n	800017e <delay_ms+0xe>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <enable_gpio>:

void enable_gpio(){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0

// SPI_1 mestre --------------------------------------------------------------

	//NSS
	GPIOA->CRL &= 0xFFF0FFFF; // limpa os bits do A4
 80001b0:	4b4c      	ldr	r3, [pc, #304]	@ (80002e4 <enable_gpio+0x138>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a4b      	ldr	r2, [pc, #300]	@ (80002e4 <enable_gpio+0x138>)
 80001b6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80001ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00020000; // habilita A4 como out push pull
 80001bc:	4b49      	ldr	r3, [pc, #292]	@ (80002e4 <enable_gpio+0x138>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a48      	ldr	r2, [pc, #288]	@ (80002e4 <enable_gpio+0x138>)
 80001c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001c6:	6013      	str	r3, [r2, #0]

	//SCK
	GPIOA->CRL &= 0xFF0FFFFF; // limpa os bits do A5
 80001c8:	4b46      	ldr	r3, [pc, #280]	@ (80002e4 <enable_gpio+0x138>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a45      	ldr	r2, [pc, #276]	@ (80002e4 <enable_gpio+0x138>)
 80001ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001d2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00A00000; // habilita A5 como out AF push pull
 80001d4:	4b43      	ldr	r3, [pc, #268]	@ (80002e4 <enable_gpio+0x138>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a42      	ldr	r2, [pc, #264]	@ (80002e4 <enable_gpio+0x138>)
 80001da:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80001de:	6013      	str	r3, [r2, #0]

	// MISO
	GPIOA->CRL &= 0xF0FFFFFF; // limpa os bits do A6
 80001e0:	4b40      	ldr	r3, [pc, #256]	@ (80002e4 <enable_gpio+0x138>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a3f      	ldr	r2, [pc, #252]	@ (80002e4 <enable_gpio+0x138>)
 80001e6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80001ea:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x04000000; // habilita A6 como input floating
 80001ec:	4b3d      	ldr	r3, [pc, #244]	@ (80002e4 <enable_gpio+0x138>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a3c      	ldr	r2, [pc, #240]	@ (80002e4 <enable_gpio+0x138>)
 80001f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80001f6:	6013      	str	r3, [r2, #0]

	//MOSI
	GPIOA->CRL &= 0x0FFFFFFF; // limpa os bits do A7
 80001f8:	4b3a      	ldr	r3, [pc, #232]	@ (80002e4 <enable_gpio+0x138>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a39      	ldr	r2, [pc, #228]	@ (80002e4 <enable_gpio+0x138>)
 80001fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0xA0000000; // habilita A7 como out AF push pull
 8000204:	4b37      	ldr	r3, [pc, #220]	@ (80002e4 <enable_gpio+0x138>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a36      	ldr	r2, [pc, #216]	@ (80002e4 <enable_gpio+0x138>)
 800020a:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 800020e:	6013      	str	r3, [r2, #0]

// SPI_2 mestre --------------------------------------------------------------

	//NSS
	GPIOB->CRH &= 0xFFF0FFFF; // limpa os bits do B12
 8000210:	4b35      	ldr	r3, [pc, #212]	@ (80002e8 <enable_gpio+0x13c>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	4a34      	ldr	r2, [pc, #208]	@ (80002e8 <enable_gpio+0x13c>)
 8000216:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800021a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x00020000; // habilita B12 como out push pull
 800021c:	4b32      	ldr	r3, [pc, #200]	@ (80002e8 <enable_gpio+0x13c>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a31      	ldr	r2, [pc, #196]	@ (80002e8 <enable_gpio+0x13c>)
 8000222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000226:	6053      	str	r3, [r2, #4]

	//SCK
	GPIOB->CRH &= 0xFF0FFFFF; // limpa os bits do B13
 8000228:	4b2f      	ldr	r3, [pc, #188]	@ (80002e8 <enable_gpio+0x13c>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a2e      	ldr	r2, [pc, #184]	@ (80002e8 <enable_gpio+0x13c>)
 800022e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000232:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x00A00000; // habilita B13 como out AF push pull
 8000234:	4b2c      	ldr	r3, [pc, #176]	@ (80002e8 <enable_gpio+0x13c>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	4a2b      	ldr	r2, [pc, #172]	@ (80002e8 <enable_gpio+0x13c>)
 800023a:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 800023e:	6053      	str	r3, [r2, #4]

	// MISO
	GPIOB->CRH &= 0xF0FFFFFF; // limpa os bits do B14
 8000240:	4b29      	ldr	r3, [pc, #164]	@ (80002e8 <enable_gpio+0x13c>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a28      	ldr	r2, [pc, #160]	@ (80002e8 <enable_gpio+0x13c>)
 8000246:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800024a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x04000000; // habilita B14 como input floating
 800024c:	4b26      	ldr	r3, [pc, #152]	@ (80002e8 <enable_gpio+0x13c>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a25      	ldr	r2, [pc, #148]	@ (80002e8 <enable_gpio+0x13c>)
 8000252:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000256:	6053      	str	r3, [r2, #4]

	//MOSI
	GPIOB->CRH &= 0x0FFFFFFF; // limpa os bits do B15
 8000258:	4b23      	ldr	r3, [pc, #140]	@ (80002e8 <enable_gpio+0x13c>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	4a22      	ldr	r2, [pc, #136]	@ (80002e8 <enable_gpio+0x13c>)
 800025e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000262:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0xA0000000; // habilita B15 como out AF push pull
 8000264:	4b20      	ldr	r3, [pc, #128]	@ (80002e8 <enable_gpio+0x13c>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a1f      	ldr	r2, [pc, #124]	@ (80002e8 <enable_gpio+0x13c>)
 800026a:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 800026e:	6053      	str	r3, [r2, #4]

	GPIOC->CRH &= ~(0xF << 28);   // limpa bits de configuração de PC15
 8000270:	4b1e      	ldr	r3, [pc, #120]	@ (80002ec <enable_gpio+0x140>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	4a1d      	ldr	r2, [pc, #116]	@ (80002ec <enable_gpio+0x140>)
 8000276:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800027a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (0x2 << 28);    // saída push-pull
 800027c:	4b1b      	ldr	r3, [pc, #108]	@ (80002ec <enable_gpio+0x140>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	4a1a      	ldr	r2, [pc, #104]	@ (80002ec <enable_gpio+0x140>)
 8000282:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000286:	6053      	str	r3, [r2, #4]

	// Coloca PC15 em nível alto (libera o reset)
	GPIOC->ODR |= (1 << 15);
 8000288:	4b18      	ldr	r3, [pc, #96]	@ (80002ec <enable_gpio+0x140>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a17      	ldr	r2, [pc, #92]	@ (80002ec <enable_gpio+0x140>)
 800028e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000292:	60d3      	str	r3, [r2, #12]

// USART ---------------------------------------------------------------------

	GPIOA->CRH &= ~(0xF << 4);     // Limpa bits de configuração de PA9
 8000294:	4b13      	ldr	r3, [pc, #76]	@ (80002e4 <enable_gpio+0x138>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a12      	ldr	r2, [pc, #72]	@ (80002e4 <enable_gpio+0x138>)
 800029a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800029e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0xB << 4);      // 1011 = AF output push-pull, 50 MHz
 80002a0:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <enable_gpio+0x138>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	4a0f      	ldr	r2, [pc, #60]	@ (80002e4 <enable_gpio+0x138>)
 80002a6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80002aa:	6053      	str	r3, [r2, #4]

	// PA10 (RX) como input floating
	GPIOA->CRH &= ~(0xF << 8);     // Limpa bits de configuração de PA10
 80002ac:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <enable_gpio+0x138>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a0c      	ldr	r2, [pc, #48]	@ (80002e4 <enable_gpio+0x138>)
 80002b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80002b6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x4 << 8);      // 0100 = input floating
 80002b8:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <enable_gpio+0x138>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a09      	ldr	r2, [pc, #36]	@ (80002e4 <enable_gpio+0x138>)
 80002be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002c2:	6053      	str	r3, [r2, #4]


// LEDS ----------------------------------------------------------------------

	GPIOC->CRH &= 0xFF0FFFFF; //Set C13 as Output 1111 1111 0000 1111 1111 1111 1111 1111
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <enable_gpio+0x140>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a08      	ldr	r2, [pc, #32]	@ (80002ec <enable_gpio+0x140>)
 80002ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80002ce:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= 0x00200000; // 1111 1111 0010 1111 1111 1111 1111 1111
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <enable_gpio+0x140>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a05      	ldr	r2, [pc, #20]	@ (80002ec <enable_gpio+0x140>)
 80002d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002da:	6053      	str	r3, [r2, #4]


}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40010800 	.word	0x40010800
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	40011000 	.word	0x40011000

080002f0 <enable_clock>:

void enable_clock(){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 2); //Enable GPIOA Clock A
 80002f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000368 <enable_clock+0x78>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000368 <enable_clock+0x78>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 3); //Enable GPIOC Clock B
 8000300:	4b19      	ldr	r3, [pc, #100]	@ (8000368 <enable_clock+0x78>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a18      	ldr	r2, [pc, #96]	@ (8000368 <enable_clock+0x78>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 4); //Enable GPIOC Clock C
 800030c:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <enable_clock+0x78>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a15      	ldr	r2, [pc, #84]	@ (8000368 <enable_clock+0x78>)
 8000312:	f043 0310 	orr.w	r3, r3, #16
 8000316:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 12); //Enable Clock SPI_1
 8000318:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <enable_clock+0x78>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a12      	ldr	r2, [pc, #72]	@ (8000368 <enable_clock+0x78>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000322:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= (1 << 14); //Enable Clock SPI_2
 8000324:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <enable_clock+0x78>)
 8000326:	69db      	ldr	r3, [r3, #28]
 8000328:	4a0f      	ldr	r2, [pc, #60]	@ (8000368 <enable_clock+0x78>)
 800032a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800032e:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= (1 << 14); //Enable usart1
 8000330:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <enable_clock+0x78>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a0c      	ldr	r2, [pc, #48]	@ (8000368 <enable_clock+0x78>)
 8000336:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800033a:	6193      	str	r3, [r2, #24]
	RCC->CR |= RCC_CR_HSION; // Liga o HSI (já vem ligado por padrão)
 800033c:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <enable_clock+0x78>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a09      	ldr	r2, [pc, #36]	@ (8000368 <enable_clock+0x78>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY)); // Espera HSI estabilizar
 8000348:	bf00      	nop
 800034a:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <enable_clock+0x78>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0f9      	beq.n	800034a <enable_clock+0x5a>
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 8000356:	4b04      	ldr	r3, [pc, #16]	@ (8000368 <enable_clock+0x78>)
 8000358:	4a03      	ldr	r2, [pc, #12]	@ (8000368 <enable_clock+0x78>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	6053      	str	r3, [r2, #4]
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <enable_spi>:

void enable_spi(SPI_TypeDef *SPIx){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	SPIx->CR1 = 0; // limpa tudo
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (2 << 3); // Define a taxa de transmissão do SCK fsk/8
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f043 0210 	orr.w	r2, r3, #16
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	601a      	str	r2, [r3, #0]
	SPIx->CR1 &= ~((1 << 1) | (1 << 0));
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f023 0203 	bic.w	r2, r3, #3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
	//SPI1->CR1 &= ~(1 << 11); // Formato de quadros = 8
	SPIx->CR1 &= ~(1 << 7);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (1 << 9); // Habilita NSS via software
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (1 << 8); // Entrada do SSM
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (1 << 2); // Mestre
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0204 	orr.w	r2, r3, #4
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (1 << 6); // Habilita SPI
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <enable_usart>:

void enable_usart(){
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	// Baud Rate: 9600 com HSI (8MHz) → USARTDIV ≈ 52.08 → 52.1 → 0x0201
	USART1->BRR = (52 << 4) | 1;
 80003dc:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <enable_usart+0x48>)
 80003de:	f240 3241 	movw	r2, #833	@ 0x341
 80003e2:	609a      	str	r2, [r3, #8]

	USART1->CR1 = 0;
 80003e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <enable_usart+0x48>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= (0 << 12);    // M = 0 (8 bits)
 80003ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <enable_usart+0x48>)
 80003ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000420 <enable_usart+0x48>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	60d3      	str	r3, [r2, #12]
	USART1->CR2 &= ~(3 << 12);   // STOP = 00 (1 stop bit)
 80003f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000420 <enable_usart+0x48>)
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000420 <enable_usart+0x48>)
 80003f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80003fc:	6113      	str	r3, [r2, #16]
	USART1->CR1 |= (1 << 3);     // TE = 1 (habilita transmissor)
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <enable_usart+0x48>)
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	4a07      	ldr	r2, [pc, #28]	@ (8000420 <enable_usart+0x48>)
 8000404:	f043 0308 	orr.w	r3, r3, #8
 8000408:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1 << 13);    // UE = 1 (USART enable)
 800040a:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <enable_usart+0x48>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	4a04      	ldr	r2, [pc, #16]	@ (8000420 <enable_usart+0x48>)
 8000410:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000414:	60d3      	str	r3, [r2, #12]
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40013800 	.word	0x40013800

08000424 <uart1_write_char>:

void uart1_write_char(char c) {
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & (1 << 7))); // Espera TXE (transmit buffer empty)
 800042e:	bf00      	nop
 8000430:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <uart1_write_char+0x38>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0f9      	beq.n	8000430 <uart1_write_char+0xc>
    USART1->DR = c;
 800043c:	4a07      	ldr	r2, [pc, #28]	@ (800045c <uart1_write_char+0x38>)
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	6053      	str	r3, [r2, #4]
    while (!(USART1->SR & (1 << 6))); // Espera TC (transmission complete)
 8000442:	bf00      	nop
 8000444:	4b05      	ldr	r3, [pc, #20]	@ (800045c <uart1_write_char+0x38>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <uart1_write_char+0x20>
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40013800 	.word	0x40013800

08000460 <uart1_write_string>:

void uart1_write_string(const char *s) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
    while (*s) {
 8000468:	e006      	b.n	8000478 <uart1_write_string+0x18>
        uart1_write_char(*s++);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	607a      	str	r2, [r7, #4]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ffd6 	bl	8000424 <uart1_write_char>
    while (*s) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1f4      	bne.n	800046a <uart1_write_string+0xa>
    }
}
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <spi_transfer>:

uint8_t spi_transfer(SPI_TypeDef *SPIx, uint8_t data) {
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	460b      	mov	r3, r1
 8000494:	70fb      	strb	r3, [r7, #3]
	while (!(SPIx->SR & SPI_SR_TXE));   // Espera buffer de transmissão vazio
 8000496:	bf00      	nop
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f003 0302 	and.w	r3, r3, #2
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f9      	beq.n	8000498 <spi_transfer+0xe>
	SPIx->DR = data;                    // Envia o dado
 80004a4:	78fa      	ldrb	r2, [r7, #3]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	60da      	str	r2, [r3, #12]
	while (!(SPIx->SR & SPI_SR_RXNE));  // Espera dado recebido
 80004aa:	bf00      	nop
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f9      	beq.n	80004ac <spi_transfer+0x22>
	return SPIx->DR;                    // Retorna o dado recebido
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	b2db      	uxtb	r3, r3
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <write_reg>:

void write_reg(SPI_TypeDef *SPIx, GPIO_TypeDef *GPIOx, uint16_t CS_Pin, uint8_t addr, uint8_t val) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	460b      	mov	r3, r1
 80004d8:	80fb      	strh	r3, [r7, #6]
 80004da:	4613      	mov	r3, r2
 80004dc:	717b      	strb	r3, [r7, #5]
	GPIOx->ODR &= ~CS_Pin;          // CS baixo (ativo)
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	88fa      	ldrh	r2, [r7, #6]
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	401a      	ands	r2, r3
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	60da      	str	r2, [r3, #12]
	spi_transfer(SPIx, addr | 0x80);// bit 7 = 1 para escrita
 80004ec:	797b      	ldrb	r3, [r7, #5]
 80004ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f7ff ffc7 	bl	800048a <spi_transfer>
	spi_transfer(SPIx, val);        // dado a escrever
 80004fc:	7e3b      	ldrb	r3, [r7, #24]
 80004fe:	4619      	mov	r1, r3
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	f7ff ffc2 	bl	800048a <spi_transfer>
	GPIOx->ODR |= CS_Pin;           // CS alto (inativo)
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	68da      	ldr	r2, [r3, #12]
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	431a      	orrs	r2, r3
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	60da      	str	r2, [r3, #12]
}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <read_reg>:

uint8_t read_reg(SPI_TypeDef *SPIx, GPIO_TypeDef *GPIOx, uint16_t CS_Pin, uint8_t addr) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	4611      	mov	r1, r2
 8000526:	461a      	mov	r2, r3
 8000528:	460b      	mov	r3, r1
 800052a:	80fb      	strh	r3, [r7, #6]
 800052c:	4613      	mov	r3, r2
 800052e:	717b      	strb	r3, [r7, #5]
	uint8_t val;
	GPIOx->ODR &= ~CS_Pin;          // CS baixo
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	88fa      	ldrh	r2, [r7, #6]
 8000536:	43d2      	mvns	r2, r2
 8000538:	401a      	ands	r2, r3
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	60da      	str	r2, [r3, #12]
	spi_transfer(SPIx, addr & 0x7F);// bit 7 = 0 para leitura
 800053e:	797b      	ldrb	r3, [r7, #5]
 8000540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000544:	b2db      	uxtb	r3, r3
 8000546:	4619      	mov	r1, r3
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f7ff ff9e 	bl	800048a <spi_transfer>
	val = spi_transfer(SPIx, 0x00); // dummy write para ler dado
 800054e:	2100      	movs	r1, #0
 8000550:	68f8      	ldr	r0, [r7, #12]
 8000552:	f7ff ff9a 	bl	800048a <spi_transfer>
 8000556:	4603      	mov	r3, r0
 8000558:	75fb      	strb	r3, [r7, #23]
	GPIOx->ODR |= CS_Pin;           // CS alto
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	68da      	ldr	r2, [r3, #12]
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	431a      	orrs	r2, r3
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	60da      	str	r2, [r3, #12]
	return val;
 8000566:	7dfb      	ldrb	r3, [r7, #23]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <Lora_init>:

void Lora_init(SPI_TypeDef *SPIx, GPIO_TypeDef *GPIOx, uint16_t CS_Pin) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	4613      	mov	r3, r2
 800057c:	80fb      	strh	r3, [r7, #6]
	// 1. Sleep mode (necessário antes de alterar OpMode)
	write_reg(SPIx, GPIOx, CS_Pin, 0x01, 0x80);  // RegOpMode: Sleep, LoRa
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	2380      	movs	r3, #128	@ 0x80
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	f7ff ff9d 	bl	80004c8 <write_reg>
	delay_ms(10);
 800058e:	200a      	movs	r0, #10
 8000590:	f7ff fdee 	bl	8000170 <delay_ms>

	// 2. Standby mode
	write_reg(SPIx, GPIOx, CS_Pin, 0x01, 0x81);  // RegOpMode: Standby, LoRa
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	2381      	movs	r3, #129	@ 0x81
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	68b9      	ldr	r1, [r7, #8]
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f7ff ff92 	bl	80004c8 <write_reg>
	delay_ms(10);
 80005a4:	200a      	movs	r0, #10
 80005a6:	f7ff fde3 	bl	8000170 <delay_ms>

	// 3. Frequência: 433 MHz → Freq = (FRF * 32 MHz) / 2^19
	// FRF = (433000000 * 2^19) / 32 MHz = 0x6C8000
	write_reg(SPIx, GPIOx, CS_Pin, 0x06, 0x6C);  // RegFrfMsb
 80005aa:	88fa      	ldrh	r2, [r7, #6]
 80005ac:	236c      	movs	r3, #108	@ 0x6c
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2306      	movs	r3, #6
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f7ff ff87 	bl	80004c8 <write_reg>
	write_reg(SPIx, GPIOx, CS_Pin, 0x07, 0x80);  // RegFrfMid
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2307      	movs	r3, #7
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff ff7f 	bl	80004c8 <write_reg>
	write_reg(SPIx, GPIOx, CS_Pin, 0x08, 0x00);  // RegFrfLsb
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	2300      	movs	r3, #0
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2308      	movs	r3, #8
 80005d2:	68b9      	ldr	r1, [r7, #8]
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f7ff ff77 	bl	80004c8 <write_reg>

	// 4. Potência: PA_BOOST, potência máxima
	write_reg(SPIx, GPIOx, CS_Pin, 0x09, 0x8F);  // RegPaConfig
 80005da:	88fa      	ldrh	r2, [r7, #6]
 80005dc:	238f      	movs	r3, #143	@ 0x8f
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2309      	movs	r3, #9
 80005e2:	68b9      	ldr	r1, [r7, #8]
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f7ff ff6f 	bl	80004c8 <write_reg>

	// 5. Configuração dos endereços FIFO
	write_reg(SPIx, GPIOx, CS_Pin, 0x0E, 0x80);  // RegFifoTxBaseAddr = 0x80
 80005ea:	88fa      	ldrh	r2, [r7, #6]
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	230e      	movs	r3, #14
 80005f2:	68b9      	ldr	r1, [r7, #8]
 80005f4:	68f8      	ldr	r0, [r7, #12]
 80005f6:	f7ff ff67 	bl	80004c8 <write_reg>
	write_reg(SPIx, GPIOx, CS_Pin, 0x0F, 0x00);  // RegFifoRxBaseAddr = 0x00
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	2300      	movs	r3, #0
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	230f      	movs	r3, #15
 8000602:	68b9      	ldr	r1, [r7, #8]
 8000604:	68f8      	ldr	r0, [r7, #12]
 8000606:	f7ff ff5f 	bl	80004c8 <write_reg>

	// 6. Modulação LoRa
	// Largura de banda = 125 kHz, CR = 4/5, modo implícito desligado
	write_reg(SPIx, GPIOx, CS_Pin, 0x1D, 0x72);  // RegModemConfig1: BW125, CR 4/5
 800060a:	88fa      	ldrh	r2, [r7, #6]
 800060c:	2372      	movs	r3, #114	@ 0x72
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	231d      	movs	r3, #29
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f7ff ff57 	bl	80004c8 <write_reg>
	// SF = 7, CRC habilitado
	write_reg(SPIx, GPIOx, CS_Pin, 0x1E, 0x74);  // RegModemConfig2: SF7, CRC on
 800061a:	88fa      	ldrh	r2, [r7, #6]
 800061c:	2374      	movs	r3, #116	@ 0x74
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	231e      	movs	r3, #30
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f7ff ff4f 	bl	80004c8 <write_reg>
	// Auto-AGC ligado
	write_reg(SPIx, GPIOx, CS_Pin, 0x26, 0x04);  // RegModemConfig3
 800062a:	88fa      	ldrh	r2, [r7, #6]
 800062c:	2304      	movs	r3, #4
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2326      	movs	r3, #38	@ 0x26
 8000632:	68b9      	ldr	r1, [r7, #8]
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f7ff ff47 	bl	80004c8 <write_reg>

	// 7. Mapeamento de pinos: DIO0 = TxDone
	write_reg(SPIx, GPIOx, CS_Pin, 0x40, 0x40);  // RegDioMapping1
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	2340      	movs	r3, #64	@ 0x40
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2340      	movs	r3, #64	@ 0x40
 8000642:	68b9      	ldr	r1, [r7, #8]
 8000644:	68f8      	ldr	r0, [r7, #12]
 8000646:	f7ff ff3f 	bl	80004c8 <write_reg>

	// 8. Modo contínuo de recepção pode ser ativado depois com:
	// write_reg(SPIx, GPIOx, CS_Pin, 0x01, 0x85); // RX continuous

	// 9. Volta ao modo standby pronto para TX/RX
	write_reg(SPIx, GPIOx, CS_Pin, 0x01, 0x81);
 800064a:	88fa      	ldrh	r2, [r7, #6]
 800064c:	2381      	movs	r3, #129	@ 0x81
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f7ff ff37 	bl	80004c8 <write_reg>
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Lora_set_long_range>:

void Lora_set_long_range(SPI_TypeDef *SPIx, GPIO_TypeDef *GPIOx, uint16_t CS_Pin) {
 8000662:	b580      	push	{r7, lr}
 8000664:	b086      	sub	sp, #24
 8000666:	af02      	add	r7, sp, #8
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	4613      	mov	r3, r2
 800066e:	80fb      	strh	r3, [r7, #6]
    // 1. Entrar em modo Sleep (necessário para mudar parâmetros)
    write_reg(SPIx, GPIOx, CS_Pin, 0x01, 0x80);  // RegOpMode: Sleep, LoRa
 8000670:	88fa      	ldrh	r2, [r7, #6]
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	68b9      	ldr	r1, [r7, #8]
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f7ff ff24 	bl	80004c8 <write_reg>
    delay_ms(10);
 8000680:	200a      	movs	r0, #10
 8000682:	f7ff fd75 	bl	8000170 <delay_ms>

    // 2. Largura de banda = 62.5 kHz, CR = 4/5 (BW ↓ → alcance ↑)
    write_reg(SPIx, GPIOx, CS_Pin, 0x1D, 0x62);  // RegModemConfig1: BW62.5kHz, CR4/5
 8000686:	88fa      	ldrh	r2, [r7, #6]
 8000688:	2362      	movs	r3, #98	@ 0x62
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	231d      	movs	r3, #29
 800068e:	68b9      	ldr	r1, [r7, #8]
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff ff19 	bl	80004c8 <write_reg>

    // 3. SF = 12 (maior espalhamento possível), CRC habilitado
    write_reg(SPIx, GPIOx, CS_Pin, 0x1E, 0xB4);  // RegModemConfig2: SF12, CRC on
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	23b4      	movs	r3, #180	@ 0xb4
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	231e      	movs	r3, #30
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff ff11 	bl	80004c8 <write_reg>

    // 4. Otimização para dados lentos (obrigatório para SF11 e SF12)
    write_reg(SPIx, GPIOx, CS_Pin, 0x26, 0x0C);  // RegModemConfig3: AGC auto + LowDataRateOptimize
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	230c      	movs	r3, #12
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2326      	movs	r3, #38	@ 0x26
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f7ff ff09 	bl	80004c8 <write_reg>

    // 5. Potência máxima com PA_BOOST (até 20 dBm)
    write_reg(SPIx, GPIOx, CS_Pin, 0x09, 0x8F);  // RegPaConfig: PA_BOOST, Pout = 17dBm
 80006b6:	88fa      	ldrh	r2, [r7, #6]
 80006b8:	238f      	movs	r3, #143	@ 0x8f
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2309      	movs	r3, #9
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff ff01 	bl	80004c8 <write_reg>
    write_reg(SPIx, GPIOx, CS_Pin, 0x4D, 0x87);  // RegPaDac: High Power mode → 20 dBm
 80006c6:	88fa      	ldrh	r2, [r7, #6]
 80006c8:	2387      	movs	r3, #135	@ 0x87
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	234d      	movs	r3, #77	@ 0x4d
 80006ce:	68b9      	ldr	r1, [r7, #8]
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff fef9 	bl	80004c8 <write_reg>

    // 6. Mapeamento DIO0 para TxDone/RxDone
    write_reg(SPIx, GPIOx, CS_Pin, 0x40, 0x40);  // RegDioMapping1: DIO0 = TxDone (00)
 80006d6:	88fa      	ldrh	r2, [r7, #6]
 80006d8:	2340      	movs	r3, #64	@ 0x40
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2340      	movs	r3, #64	@ 0x40
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f7ff fef1 	bl	80004c8 <write_reg>

    // 7. Voltar ao modo standby (pronto para enviar ou receber)
    write_reg(SPIx, GPIOx, CS_Pin, 0x01, 0x81);  // RegOpMode: Standby, LoRa
 80006e6:	88fa      	ldrh	r2, [r7, #6]
 80006e8:	2381      	movs	r3, #129	@ 0x81
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff fee9 	bl	80004c8 <write_reg>
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <Lora_receive>:

	// 4. Coloca o módulo em modo de transmissão
	write_reg(SPIx, GPIOx, CS_Pin, 0x01, 0x83); // RegOpMode = LoRa | TX
}

int Lora_receive(SPI_TypeDef *SPIx, GPIO_TypeDef *GPIOx, uint16_t CS_Pin, uint8_t *buffer) {
 80006fe:	b590      	push	{r4, r7, lr}
 8000700:	b089      	sub	sp, #36	@ 0x24
 8000702:	af02      	add	r7, sp, #8
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4613      	mov	r3, r2
 800070c:	80fb      	strh	r3, [r7, #6]
	// 1. Coloca o módulo em modo de recepção contínua
	write_reg(SPIx, GPIOx, CS_Pin, 0x01, 0x85); // RegOpMode = LoRa | RXCONTINUOUS
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	2385      	movs	r3, #133	@ 0x85
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff fed5 	bl	80004c8 <write_reg>

	// 2. Verifica se chegou um pacote (RxDone = bit 6 em RegIrqFlags = 0x12)
	if ((read_reg(SPIx, GPIOx, CS_Pin, 0x12) & (1 << 6)) == 0) {
 800071e:	88fa      	ldrh	r2, [r7, #6]
 8000720:	2312      	movs	r3, #18
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f7ff fef8 	bl	800051a <read_reg>
 800072a:	4603      	mov	r3, r0
 800072c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <Lora_receive+0x3a>
		return 0; // Nenhum pacote recebido
 8000734:	2300      	movs	r3, #0
 8000736:	e035      	b.n	80007a4 <Lora_receive+0xa6>
	}

	// 3. Lê o endereço do FIFO onde o pacote começa
	uint8_t fifo_addr = read_reg(SPIx, GPIOx, CS_Pin, 0x10); // RegFifoRxCurrentAddr
 8000738:	88fa      	ldrh	r2, [r7, #6]
 800073a:	2310      	movs	r3, #16
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f7ff feeb 	bl	800051a <read_reg>
 8000744:	4603      	mov	r3, r0
 8000746:	75bb      	strb	r3, [r7, #22]

	// 4. Define o ponteiro do FIFO para o endereço correto
	write_reg(SPIx, GPIOx, CS_Pin, 0x0D, fifo_addr); // RegFifoAddrPtr
 8000748:	88fa      	ldrh	r2, [r7, #6]
 800074a:	7dbb      	ldrb	r3, [r7, #22]
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	230d      	movs	r3, #13
 8000750:	68b9      	ldr	r1, [r7, #8]
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f7ff feb8 	bl	80004c8 <write_reg>

	// 5. Lê o tamanho do payload
	uint8_t len = read_reg(SPIx, GPIOx, CS_Pin, 0x13); // RegRxNbBytes
 8000758:	88fa      	ldrh	r2, [r7, #6]
 800075a:	2313      	movs	r3, #19
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f7ff fedb 	bl	800051a <read_reg>
 8000764:	4603      	mov	r3, r0
 8000766:	757b      	strb	r3, [r7, #21]

	// 6. Lê os dados do FIFO
	for (uint8_t i = 0; i < len; i++) {
 8000768:	2300      	movs	r3, #0
 800076a:	75fb      	strb	r3, [r7, #23]
 800076c:	e00d      	b.n	800078a <Lora_receive+0x8c>
		buffer[i] = read_reg(SPIx, GPIOx, CS_Pin, 0x00); // RegFifo = 0x00
 800076e:	7dfb      	ldrb	r3, [r7, #23]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	18d4      	adds	r4, r2, r3
 8000774:	88fa      	ldrh	r2, [r7, #6]
 8000776:	2300      	movs	r3, #0
 8000778:	68b9      	ldr	r1, [r7, #8]
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f7ff fecd 	bl	800051a <read_reg>
 8000780:	4603      	mov	r3, r0
 8000782:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < len; i++) {
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	3301      	adds	r3, #1
 8000788:	75fb      	strb	r3, [r7, #23]
 800078a:	7dfa      	ldrb	r2, [r7, #23]
 800078c:	7d7b      	ldrb	r3, [r7, #21]
 800078e:	429a      	cmp	r2, r3
 8000790:	d3ed      	bcc.n	800076e <Lora_receive+0x70>
	}

	// 7. Limpa o RxDone e outros possíveis flags
	write_reg(SPIx, GPIOx, CS_Pin, 0x12, 0xFF); // limpa todos os IRQs
 8000792:	88fa      	ldrh	r2, [r7, #6]
 8000794:	23ff      	movs	r3, #255	@ 0xff
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2312      	movs	r3, #18
 800079a:	68b9      	ldr	r1, [r7, #8]
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f7ff fe93 	bl	80004c8 <write_reg>

	// 8. Retorna o número de bytes recebidos
	return len;
 80007a2:	7d7b      	ldrb	r3, [r7, #21]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	371c      	adds	r7, #28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd90      	pop	{r4, r7, pc}

080007ac <main>:

int main(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b096      	sub	sp, #88	@ 0x58
 80007b0:	af00      	add	r7, sp, #0
	enable_clock();
 80007b2:	f7ff fd9d 	bl	80002f0 <enable_clock>
	enable_gpio();
 80007b6:	f7ff fcf9 	bl	80001ac <enable_gpio>
	enable_spi(SPI1);
 80007ba:	4833      	ldr	r0, [pc, #204]	@ (8000888 <main+0xdc>)
 80007bc:	f7ff fdd6 	bl	800036c <enable_spi>
	enable_usart();
 80007c0:	f7ff fe0a 	bl	80003d8 <enable_usart>
	Lora_init(SPI1,GPIOA,(1 << 4));
 80007c4:	2210      	movs	r2, #16
 80007c6:	4931      	ldr	r1, [pc, #196]	@ (800088c <main+0xe0>)
 80007c8:	482f      	ldr	r0, [pc, #188]	@ (8000888 <main+0xdc>)
 80007ca:	f7ff fed1 	bl	8000570 <Lora_init>
	Lora_set_long_range(SPI1, GPIOA, (1 << 4));
 80007ce:	2210      	movs	r2, #16
 80007d0:	492e      	ldr	r1, [pc, #184]	@ (800088c <main+0xe0>)
 80007d2:	482d      	ldr	r0, [pc, #180]	@ (8000888 <main+0xdc>)
 80007d4:	f7ff ff45 	bl	8000662 <Lora_set_long_range>
	uint8_t data[5];
	GPIOC->ODR |= (1 << 13); // Apaga LED
 80007d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <main+0xe4>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000890 <main+0xe4>)
 80007de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007e2:	60d3      	str	r3, [r2, #12]
	while (1) {
		int n = Lora_receive(SPI1, GPIOA, (1 << 4), data);
 80007e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007e8:	2210      	movs	r2, #16
 80007ea:	4928      	ldr	r1, [pc, #160]	@ (800088c <main+0xe0>)
 80007ec:	4826      	ldr	r0, [pc, #152]	@ (8000888 <main+0xdc>)
 80007ee:	f7ff ff86 	bl	80006fe <Lora_receive>
 80007f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		if (n > 0) {
 80007f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	dd40      	ble.n	800087c <main+0xd0>
			char buffer[64]; // Tamanho suficiente para "UID:" + até 10 bytes * 2 + \r\n + '\0'
			int pos = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	657b      	str	r3, [r7, #84]	@ 0x54

			// Prefixo
			pos += sprintf(buffer + pos, "UID:");
 80007fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000800:	1d3a      	adds	r2, r7, #4
 8000802:	4413      	add	r3, r2
 8000804:	4923      	ldr	r1, [pc, #140]	@ (8000894 <main+0xe8>)
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f8aa 	bl	8000960 <siprintf>
 800080c:	4602      	mov	r2, r0
 800080e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000810:	4413      	add	r3, r2
 8000812:	657b      	str	r3, [r7, #84]	@ 0x54

			// Concatena cada byte em hexadecimal
			for (int i = 0; i < n; i++) {
 8000814:	2300      	movs	r3, #0
 8000816:	653b      	str	r3, [r7, #80]	@ 0x50
 8000818:	e012      	b.n	8000840 <main+0x94>
				pos += sprintf(buffer + pos, "%02X", data[i]);
 800081a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800081c:	1d3a      	adds	r2, r7, #4
 800081e:	18d0      	adds	r0, r2, r3
 8000820:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	491a      	ldr	r1, [pc, #104]	@ (8000898 <main+0xec>)
 800082e:	f000 f897 	bl	8000960 <siprintf>
 8000832:	4602      	mov	r2, r0
 8000834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000836:	4413      	add	r3, r2
 8000838:	657b      	str	r3, [r7, #84]	@ 0x54
			for (int i = 0; i < n; i++) {
 800083a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800083c:	3301      	adds	r3, #1
 800083e:	653b      	str	r3, [r7, #80]	@ 0x50
 8000840:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000844:	429a      	cmp	r2, r3
 8000846:	dbe8      	blt.n	800081a <main+0x6e>
			}

			// Nova linha
			sprintf(buffer + pos, "\r\n");
 8000848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800084a:	1d3a      	adds	r2, r7, #4
 800084c:	4413      	add	r3, r2
 800084e:	4913      	ldr	r1, [pc, #76]	@ (800089c <main+0xf0>)
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f885 	bl	8000960 <siprintf>

			// Envia tudo de uma vez
			uart1_write_string(buffer);
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe01 	bl	8000460 <uart1_write_string>

			// Pisca LED
			GPIOC->ODR &= ~(1 << 13); // LED ON
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <main+0xe4>)
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <main+0xe4>)
 8000864:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000868:	60d3      	str	r3, [r2, #12]
			delay_ms(200);
 800086a:	20c8      	movs	r0, #200	@ 0xc8
 800086c:	f7ff fc80 	bl	8000170 <delay_ms>
			GPIOC->ODR |= (1 << 13);  // LED OFF
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <main+0xe4>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a06      	ldr	r2, [pc, #24]	@ (8000890 <main+0xe4>)
 8000876:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800087a:	60d3      	str	r3, [r2, #12]
		}
		delay_ms(300);
 800087c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000880:	f7ff fc76 	bl	8000170 <delay_ms>
	while (1) {
 8000884:	e7ae      	b.n	80007e4 <main+0x38>
 8000886:	bf00      	nop
 8000888:	40013000 	.word	0x40013000
 800088c:	40010800 	.word	0x40010800
 8000890:	40011000 	.word	0x40011000
 8000894:	080012c8 	.word	0x080012c8
 8000898:	080012d0 	.word	0x080012d0
 800089c:	080012d8 	.word	0x080012d8

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f000 f868 	bl	80009a4 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20005000 	.word	0x20005000
 8000900:	00000400 	.word	0x00000400
 8000904:	2000006c 	.word	0x2000006c
 8000908:	200001b8 	.word	0x200001b8

0800090c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800090c:	480d      	ldr	r0, [pc, #52]	@ (8000944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000910:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <LoopForever+0x6>)
  ldr r1, =_edata
 8000916:	490d      	ldr	r1, [pc, #52]	@ (800094c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <LoopForever+0xe>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <LoopForever+0x12>)
  ldr r4, =_ebss
 800092c:	4c0a      	ldr	r4, [pc, #40]	@ (8000958 <LoopForever+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800093a:	f000 f839 	bl	80009b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093e:	f7ff ff35 	bl	80007ac <main>

08000942 <LoopForever>:

LoopForever:
  b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   r0, =_estack
 8000944:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000950:	08001318 	.word	0x08001318
  ldr r2, =_sbss
 8000954:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000958:	200001b8 	.word	0x200001b8

0800095c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>
	...

08000960 <siprintf>:
 8000960:	b40e      	push	{r1, r2, r3}
 8000962:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000966:	b510      	push	{r4, lr}
 8000968:	2400      	movs	r4, #0
 800096a:	b09d      	sub	sp, #116	@ 0x74
 800096c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800096e:	9002      	str	r0, [sp, #8]
 8000970:	9006      	str	r0, [sp, #24]
 8000972:	9107      	str	r1, [sp, #28]
 8000974:	9104      	str	r1, [sp, #16]
 8000976:	4809      	ldr	r0, [pc, #36]	@ (800099c <siprintf+0x3c>)
 8000978:	4909      	ldr	r1, [pc, #36]	@ (80009a0 <siprintf+0x40>)
 800097a:	f853 2b04 	ldr.w	r2, [r3], #4
 800097e:	9105      	str	r1, [sp, #20]
 8000980:	6800      	ldr	r0, [r0, #0]
 8000982:	a902      	add	r1, sp, #8
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000988:	f000 f98a 	bl	8000ca0 <_svfiprintf_r>
 800098c:	9b02      	ldr	r3, [sp, #8]
 800098e:	701c      	strb	r4, [r3, #0]
 8000990:	b01d      	add	sp, #116	@ 0x74
 8000992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000996:	b003      	add	sp, #12
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000000 	.word	0x20000000
 80009a0:	ffff0208 	.word	0xffff0208

080009a4 <__errno>:
 80009a4:	4b01      	ldr	r3, [pc, #4]	@ (80009ac <__errno+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000

080009b0 <__libc_init_array>:
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	2600      	movs	r6, #0
 80009b4:	4d0c      	ldr	r5, [pc, #48]	@ (80009e8 <__libc_init_array+0x38>)
 80009b6:	4c0d      	ldr	r4, [pc, #52]	@ (80009ec <__libc_init_array+0x3c>)
 80009b8:	1b64      	subs	r4, r4, r5
 80009ba:	10a4      	asrs	r4, r4, #2
 80009bc:	42a6      	cmp	r6, r4
 80009be:	d109      	bne.n	80009d4 <__libc_init_array+0x24>
 80009c0:	f000 fc76 	bl	80012b0 <_init>
 80009c4:	2600      	movs	r6, #0
 80009c6:	4d0a      	ldr	r5, [pc, #40]	@ (80009f0 <__libc_init_array+0x40>)
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <__libc_init_array+0x44>)
 80009ca:	1b64      	subs	r4, r4, r5
 80009cc:	10a4      	asrs	r4, r4, #2
 80009ce:	42a6      	cmp	r6, r4
 80009d0:	d105      	bne.n	80009de <__libc_init_array+0x2e>
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d8:	4798      	blx	r3
 80009da:	3601      	adds	r6, #1
 80009dc:	e7ee      	b.n	80009bc <__libc_init_array+0xc>
 80009de:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e2:	4798      	blx	r3
 80009e4:	3601      	adds	r6, #1
 80009e6:	e7f2      	b.n	80009ce <__libc_init_array+0x1e>
 80009e8:	08001310 	.word	0x08001310
 80009ec:	08001310 	.word	0x08001310
 80009f0:	08001310 	.word	0x08001310
 80009f4:	08001314 	.word	0x08001314

080009f8 <__retarget_lock_acquire_recursive>:
 80009f8:	4770      	bx	lr

080009fa <__retarget_lock_release_recursive>:
 80009fa:	4770      	bx	lr

080009fc <_free_r>:
 80009fc:	b538      	push	{r3, r4, r5, lr}
 80009fe:	4605      	mov	r5, r0
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d040      	beq.n	8000a86 <_free_r+0x8a>
 8000a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a08:	1f0c      	subs	r4, r1, #4
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bfb8      	it	lt
 8000a0e:	18e4      	addlt	r4, r4, r3
 8000a10:	f000 f8de 	bl	8000bd0 <__malloc_lock>
 8000a14:	4a1c      	ldr	r2, [pc, #112]	@ (8000a88 <_free_r+0x8c>)
 8000a16:	6813      	ldr	r3, [r2, #0]
 8000a18:	b933      	cbnz	r3, 8000a28 <_free_r+0x2c>
 8000a1a:	6063      	str	r3, [r4, #4]
 8000a1c:	6014      	str	r4, [r2, #0]
 8000a1e:	4628      	mov	r0, r5
 8000a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a24:	f000 b8da 	b.w	8000bdc <__malloc_unlock>
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <_free_r+0x42>
 8000a2c:	6820      	ldr	r0, [r4, #0]
 8000a2e:	1821      	adds	r1, r4, r0
 8000a30:	428b      	cmp	r3, r1
 8000a32:	bf01      	itttt	eq
 8000a34:	6819      	ldreq	r1, [r3, #0]
 8000a36:	685b      	ldreq	r3, [r3, #4]
 8000a38:	1809      	addeq	r1, r1, r0
 8000a3a:	6021      	streq	r1, [r4, #0]
 8000a3c:	e7ed      	b.n	8000a1a <_free_r+0x1e>
 8000a3e:	461a      	mov	r2, r3
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	b10b      	cbz	r3, 8000a48 <_free_r+0x4c>
 8000a44:	42a3      	cmp	r3, r4
 8000a46:	d9fa      	bls.n	8000a3e <_free_r+0x42>
 8000a48:	6811      	ldr	r1, [r2, #0]
 8000a4a:	1850      	adds	r0, r2, r1
 8000a4c:	42a0      	cmp	r0, r4
 8000a4e:	d10b      	bne.n	8000a68 <_free_r+0x6c>
 8000a50:	6820      	ldr	r0, [r4, #0]
 8000a52:	4401      	add	r1, r0
 8000a54:	1850      	adds	r0, r2, r1
 8000a56:	4283      	cmp	r3, r0
 8000a58:	6011      	str	r1, [r2, #0]
 8000a5a:	d1e0      	bne.n	8000a1e <_free_r+0x22>
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4408      	add	r0, r1
 8000a62:	6010      	str	r0, [r2, #0]
 8000a64:	6053      	str	r3, [r2, #4]
 8000a66:	e7da      	b.n	8000a1e <_free_r+0x22>
 8000a68:	d902      	bls.n	8000a70 <_free_r+0x74>
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	602b      	str	r3, [r5, #0]
 8000a6e:	e7d6      	b.n	8000a1e <_free_r+0x22>
 8000a70:	6820      	ldr	r0, [r4, #0]
 8000a72:	1821      	adds	r1, r4, r0
 8000a74:	428b      	cmp	r3, r1
 8000a76:	bf01      	itttt	eq
 8000a78:	6819      	ldreq	r1, [r3, #0]
 8000a7a:	685b      	ldreq	r3, [r3, #4]
 8000a7c:	1809      	addeq	r1, r1, r0
 8000a7e:	6021      	streq	r1, [r4, #0]
 8000a80:	6063      	str	r3, [r4, #4]
 8000a82:	6054      	str	r4, [r2, #4]
 8000a84:	e7cb      	b.n	8000a1e <_free_r+0x22>
 8000a86:	bd38      	pop	{r3, r4, r5, pc}
 8000a88:	200001b4 	.word	0x200001b4

08000a8c <sbrk_aligned>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	4e0f      	ldr	r6, [pc, #60]	@ (8000acc <sbrk_aligned+0x40>)
 8000a90:	460c      	mov	r4, r1
 8000a92:	6831      	ldr	r1, [r6, #0]
 8000a94:	4605      	mov	r5, r0
 8000a96:	b911      	cbnz	r1, 8000a9e <sbrk_aligned+0x12>
 8000a98:	f000 fba8 	bl	80011ec <_sbrk_r>
 8000a9c:	6030      	str	r0, [r6, #0]
 8000a9e:	4621      	mov	r1, r4
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	f000 fba3 	bl	80011ec <_sbrk_r>
 8000aa6:	1c43      	adds	r3, r0, #1
 8000aa8:	d103      	bne.n	8000ab2 <sbrk_aligned+0x26>
 8000aaa:	f04f 34ff 	mov.w	r4, #4294967295
 8000aae:	4620      	mov	r0, r4
 8000ab0:	bd70      	pop	{r4, r5, r6, pc}
 8000ab2:	1cc4      	adds	r4, r0, #3
 8000ab4:	f024 0403 	bic.w	r4, r4, #3
 8000ab8:	42a0      	cmp	r0, r4
 8000aba:	d0f8      	beq.n	8000aae <sbrk_aligned+0x22>
 8000abc:	1a21      	subs	r1, r4, r0
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f000 fb94 	bl	80011ec <_sbrk_r>
 8000ac4:	3001      	adds	r0, #1
 8000ac6:	d1f2      	bne.n	8000aae <sbrk_aligned+0x22>
 8000ac8:	e7ef      	b.n	8000aaa <sbrk_aligned+0x1e>
 8000aca:	bf00      	nop
 8000acc:	200001b0 	.word	0x200001b0

08000ad0 <_malloc_r>:
 8000ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ad4:	1ccd      	adds	r5, r1, #3
 8000ad6:	f025 0503 	bic.w	r5, r5, #3
 8000ada:	3508      	adds	r5, #8
 8000adc:	2d0c      	cmp	r5, #12
 8000ade:	bf38      	it	cc
 8000ae0:	250c      	movcc	r5, #12
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	4606      	mov	r6, r0
 8000ae6:	db01      	blt.n	8000aec <_malloc_r+0x1c>
 8000ae8:	42a9      	cmp	r1, r5
 8000aea:	d904      	bls.n	8000af6 <_malloc_r+0x26>
 8000aec:	230c      	movs	r3, #12
 8000aee:	6033      	str	r3, [r6, #0]
 8000af0:	2000      	movs	r0, #0
 8000af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000af6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bcc <_malloc_r+0xfc>
 8000afa:	f000 f869 	bl	8000bd0 <__malloc_lock>
 8000afe:	f8d8 3000 	ldr.w	r3, [r8]
 8000b02:	461c      	mov	r4, r3
 8000b04:	bb44      	cbnz	r4, 8000b58 <_malloc_r+0x88>
 8000b06:	4629      	mov	r1, r5
 8000b08:	4630      	mov	r0, r6
 8000b0a:	f7ff ffbf 	bl	8000a8c <sbrk_aligned>
 8000b0e:	1c43      	adds	r3, r0, #1
 8000b10:	4604      	mov	r4, r0
 8000b12:	d158      	bne.n	8000bc6 <_malloc_r+0xf6>
 8000b14:	f8d8 4000 	ldr.w	r4, [r8]
 8000b18:	4627      	mov	r7, r4
 8000b1a:	2f00      	cmp	r7, #0
 8000b1c:	d143      	bne.n	8000ba6 <_malloc_r+0xd6>
 8000b1e:	2c00      	cmp	r4, #0
 8000b20:	d04b      	beq.n	8000bba <_malloc_r+0xea>
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	4639      	mov	r1, r7
 8000b26:	4630      	mov	r0, r6
 8000b28:	eb04 0903 	add.w	r9, r4, r3
 8000b2c:	f000 fb5e 	bl	80011ec <_sbrk_r>
 8000b30:	4581      	cmp	r9, r0
 8000b32:	d142      	bne.n	8000bba <_malloc_r+0xea>
 8000b34:	6821      	ldr	r1, [r4, #0]
 8000b36:	4630      	mov	r0, r6
 8000b38:	1a6d      	subs	r5, r5, r1
 8000b3a:	4629      	mov	r1, r5
 8000b3c:	f7ff ffa6 	bl	8000a8c <sbrk_aligned>
 8000b40:	3001      	adds	r0, #1
 8000b42:	d03a      	beq.n	8000bba <_malloc_r+0xea>
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	442b      	add	r3, r5
 8000b48:	6023      	str	r3, [r4, #0]
 8000b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	bb62      	cbnz	r2, 8000bac <_malloc_r+0xdc>
 8000b52:	f8c8 7000 	str.w	r7, [r8]
 8000b56:	e00f      	b.n	8000b78 <_malloc_r+0xa8>
 8000b58:	6822      	ldr	r2, [r4, #0]
 8000b5a:	1b52      	subs	r2, r2, r5
 8000b5c:	d420      	bmi.n	8000ba0 <_malloc_r+0xd0>
 8000b5e:	2a0b      	cmp	r2, #11
 8000b60:	d917      	bls.n	8000b92 <_malloc_r+0xc2>
 8000b62:	1961      	adds	r1, r4, r5
 8000b64:	42a3      	cmp	r3, r4
 8000b66:	6025      	str	r5, [r4, #0]
 8000b68:	bf18      	it	ne
 8000b6a:	6059      	strne	r1, [r3, #4]
 8000b6c:	6863      	ldr	r3, [r4, #4]
 8000b6e:	bf08      	it	eq
 8000b70:	f8c8 1000 	streq.w	r1, [r8]
 8000b74:	5162      	str	r2, [r4, r5]
 8000b76:	604b      	str	r3, [r1, #4]
 8000b78:	4630      	mov	r0, r6
 8000b7a:	f000 f82f 	bl	8000bdc <__malloc_unlock>
 8000b7e:	f104 000b 	add.w	r0, r4, #11
 8000b82:	1d23      	adds	r3, r4, #4
 8000b84:	f020 0007 	bic.w	r0, r0, #7
 8000b88:	1ac2      	subs	r2, r0, r3
 8000b8a:	bf1c      	itt	ne
 8000b8c:	1a1b      	subne	r3, r3, r0
 8000b8e:	50a3      	strne	r3, [r4, r2]
 8000b90:	e7af      	b.n	8000af2 <_malloc_r+0x22>
 8000b92:	6862      	ldr	r2, [r4, #4]
 8000b94:	42a3      	cmp	r3, r4
 8000b96:	bf0c      	ite	eq
 8000b98:	f8c8 2000 	streq.w	r2, [r8]
 8000b9c:	605a      	strne	r2, [r3, #4]
 8000b9e:	e7eb      	b.n	8000b78 <_malloc_r+0xa8>
 8000ba0:	4623      	mov	r3, r4
 8000ba2:	6864      	ldr	r4, [r4, #4]
 8000ba4:	e7ae      	b.n	8000b04 <_malloc_r+0x34>
 8000ba6:	463c      	mov	r4, r7
 8000ba8:	687f      	ldr	r7, [r7, #4]
 8000baa:	e7b6      	b.n	8000b1a <_malloc_r+0x4a>
 8000bac:	461a      	mov	r2, r3
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	42a3      	cmp	r3, r4
 8000bb2:	d1fb      	bne.n	8000bac <_malloc_r+0xdc>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	6053      	str	r3, [r2, #4]
 8000bb8:	e7de      	b.n	8000b78 <_malloc_r+0xa8>
 8000bba:	230c      	movs	r3, #12
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	6033      	str	r3, [r6, #0]
 8000bc0:	f000 f80c 	bl	8000bdc <__malloc_unlock>
 8000bc4:	e794      	b.n	8000af0 <_malloc_r+0x20>
 8000bc6:	6005      	str	r5, [r0, #0]
 8000bc8:	e7d6      	b.n	8000b78 <_malloc_r+0xa8>
 8000bca:	bf00      	nop
 8000bcc:	200001b4 	.word	0x200001b4

08000bd0 <__malloc_lock>:
 8000bd0:	4801      	ldr	r0, [pc, #4]	@ (8000bd8 <__malloc_lock+0x8>)
 8000bd2:	f7ff bf11 	b.w	80009f8 <__retarget_lock_acquire_recursive>
 8000bd6:	bf00      	nop
 8000bd8:	200001ac 	.word	0x200001ac

08000bdc <__malloc_unlock>:
 8000bdc:	4801      	ldr	r0, [pc, #4]	@ (8000be4 <__malloc_unlock+0x8>)
 8000bde:	f7ff bf0c 	b.w	80009fa <__retarget_lock_release_recursive>
 8000be2:	bf00      	nop
 8000be4:	200001ac 	.word	0x200001ac

08000be8 <__ssputs_r>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	461f      	mov	r7, r3
 8000bee:	688e      	ldr	r6, [r1, #8]
 8000bf0:	4682      	mov	sl, r0
 8000bf2:	42be      	cmp	r6, r7
 8000bf4:	460c      	mov	r4, r1
 8000bf6:	4690      	mov	r8, r2
 8000bf8:	680b      	ldr	r3, [r1, #0]
 8000bfa:	d82d      	bhi.n	8000c58 <__ssputs_r+0x70>
 8000bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000c04:	d026      	beq.n	8000c54 <__ssputs_r+0x6c>
 8000c06:	6965      	ldr	r5, [r4, #20]
 8000c08:	6909      	ldr	r1, [r1, #16]
 8000c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c0e:	eba3 0901 	sub.w	r9, r3, r1
 8000c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c16:	1c7b      	adds	r3, r7, #1
 8000c18:	444b      	add	r3, r9
 8000c1a:	106d      	asrs	r5, r5, #1
 8000c1c:	429d      	cmp	r5, r3
 8000c1e:	bf38      	it	cc
 8000c20:	461d      	movcc	r5, r3
 8000c22:	0553      	lsls	r3, r2, #21
 8000c24:	d527      	bpl.n	8000c76 <__ssputs_r+0x8e>
 8000c26:	4629      	mov	r1, r5
 8000c28:	f7ff ff52 	bl	8000ad0 <_malloc_r>
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	b360      	cbz	r0, 8000c8a <__ssputs_r+0xa2>
 8000c30:	464a      	mov	r2, r9
 8000c32:	6921      	ldr	r1, [r4, #16]
 8000c34:	f000 faf8 	bl	8001228 <memcpy>
 8000c38:	89a3      	ldrh	r3, [r4, #12]
 8000c3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c42:	81a3      	strh	r3, [r4, #12]
 8000c44:	6126      	str	r6, [r4, #16]
 8000c46:	444e      	add	r6, r9
 8000c48:	6026      	str	r6, [r4, #0]
 8000c4a:	463e      	mov	r6, r7
 8000c4c:	6165      	str	r5, [r4, #20]
 8000c4e:	eba5 0509 	sub.w	r5, r5, r9
 8000c52:	60a5      	str	r5, [r4, #8]
 8000c54:	42be      	cmp	r6, r7
 8000c56:	d900      	bls.n	8000c5a <__ssputs_r+0x72>
 8000c58:	463e      	mov	r6, r7
 8000c5a:	4632      	mov	r2, r6
 8000c5c:	4641      	mov	r1, r8
 8000c5e:	6820      	ldr	r0, [r4, #0]
 8000c60:	f000 faaa 	bl	80011b8 <memmove>
 8000c64:	2000      	movs	r0, #0
 8000c66:	68a3      	ldr	r3, [r4, #8]
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	60a3      	str	r3, [r4, #8]
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	4433      	add	r3, r6
 8000c70:	6023      	str	r3, [r4, #0]
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	462a      	mov	r2, r5
 8000c78:	f000 fae4 	bl	8001244 <_realloc_r>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d1e0      	bne.n	8000c44 <__ssputs_r+0x5c>
 8000c82:	4650      	mov	r0, sl
 8000c84:	6921      	ldr	r1, [r4, #16]
 8000c86:	f7ff feb9 	bl	80009fc <_free_r>
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	f8ca 3000 	str.w	r3, [sl]
 8000c90:	89a3      	ldrh	r3, [r4, #12]
 8000c92:	f04f 30ff 	mov.w	r0, #4294967295
 8000c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c9a:	81a3      	strh	r3, [r4, #12]
 8000c9c:	e7e9      	b.n	8000c72 <__ssputs_r+0x8a>
	...

08000ca0 <_svfiprintf_r>:
 8000ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ca4:	4698      	mov	r8, r3
 8000ca6:	898b      	ldrh	r3, [r1, #12]
 8000ca8:	4607      	mov	r7, r0
 8000caa:	061b      	lsls	r3, r3, #24
 8000cac:	460d      	mov	r5, r1
 8000cae:	4614      	mov	r4, r2
 8000cb0:	b09d      	sub	sp, #116	@ 0x74
 8000cb2:	d510      	bpl.n	8000cd6 <_svfiprintf_r+0x36>
 8000cb4:	690b      	ldr	r3, [r1, #16]
 8000cb6:	b973      	cbnz	r3, 8000cd6 <_svfiprintf_r+0x36>
 8000cb8:	2140      	movs	r1, #64	@ 0x40
 8000cba:	f7ff ff09 	bl	8000ad0 <_malloc_r>
 8000cbe:	6028      	str	r0, [r5, #0]
 8000cc0:	6128      	str	r0, [r5, #16]
 8000cc2:	b930      	cbnz	r0, 8000cd2 <_svfiprintf_r+0x32>
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	b01d      	add	sp, #116	@ 0x74
 8000cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd2:	2340      	movs	r3, #64	@ 0x40
 8000cd4:	616b      	str	r3, [r5, #20]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cda:	2320      	movs	r3, #32
 8000cdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ce0:	2330      	movs	r3, #48	@ 0x30
 8000ce2:	f04f 0901 	mov.w	r9, #1
 8000ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8000e84 <_svfiprintf_r+0x1e4>
 8000cee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cfa:	b10a      	cbz	r2, 8000d00 <_svfiprintf_r+0x60>
 8000cfc:	2a25      	cmp	r2, #37	@ 0x25
 8000cfe:	d1f9      	bne.n	8000cf4 <_svfiprintf_r+0x54>
 8000d00:	ebba 0b04 	subs.w	fp, sl, r4
 8000d04:	d00b      	beq.n	8000d1e <_svfiprintf_r+0x7e>
 8000d06:	465b      	mov	r3, fp
 8000d08:	4622      	mov	r2, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	4638      	mov	r0, r7
 8000d0e:	f7ff ff6b 	bl	8000be8 <__ssputs_r>
 8000d12:	3001      	adds	r0, #1
 8000d14:	f000 80a7 	beq.w	8000e66 <_svfiprintf_r+0x1c6>
 8000d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d1a:	445a      	add	r2, fp
 8000d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 809f 	beq.w	8000e66 <_svfiprintf_r+0x1c6>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d32:	f10a 0a01 	add.w	sl, sl, #1
 8000d36:	9304      	str	r3, [sp, #16]
 8000d38:	9307      	str	r3, [sp, #28]
 8000d3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d40:	4654      	mov	r4, sl
 8000d42:	2205      	movs	r2, #5
 8000d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d48:	484e      	ldr	r0, [pc, #312]	@ (8000e84 <_svfiprintf_r+0x1e4>)
 8000d4a:	f000 fa5f 	bl	800120c <memchr>
 8000d4e:	9a04      	ldr	r2, [sp, #16]
 8000d50:	b9d8      	cbnz	r0, 8000d8a <_svfiprintf_r+0xea>
 8000d52:	06d0      	lsls	r0, r2, #27
 8000d54:	bf44      	itt	mi
 8000d56:	2320      	movmi	r3, #32
 8000d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d5c:	0711      	lsls	r1, r2, #28
 8000d5e:	bf44      	itt	mi
 8000d60:	232b      	movmi	r3, #43	@ 0x2b
 8000d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d66:	f89a 3000 	ldrb.w	r3, [sl]
 8000d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d6c:	d015      	beq.n	8000d9a <_svfiprintf_r+0xfa>
 8000d6e:	4654      	mov	r4, sl
 8000d70:	2000      	movs	r0, #0
 8000d72:	f04f 0c0a 	mov.w	ip, #10
 8000d76:	9a07      	ldr	r2, [sp, #28]
 8000d78:	4621      	mov	r1, r4
 8000d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d7e:	3b30      	subs	r3, #48	@ 0x30
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	d94b      	bls.n	8000e1c <_svfiprintf_r+0x17c>
 8000d84:	b1b0      	cbz	r0, 8000db4 <_svfiprintf_r+0x114>
 8000d86:	9207      	str	r2, [sp, #28]
 8000d88:	e014      	b.n	8000db4 <_svfiprintf_r+0x114>
 8000d8a:	eba0 0308 	sub.w	r3, r0, r8
 8000d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	46a2      	mov	sl, r4
 8000d96:	9304      	str	r3, [sp, #16]
 8000d98:	e7d2      	b.n	8000d40 <_svfiprintf_r+0xa0>
 8000d9a:	9b03      	ldr	r3, [sp, #12]
 8000d9c:	1d19      	adds	r1, r3, #4
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	9103      	str	r1, [sp, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	bfbb      	ittet	lt
 8000da6:	425b      	neglt	r3, r3
 8000da8:	f042 0202 	orrlt.w	r2, r2, #2
 8000dac:	9307      	strge	r3, [sp, #28]
 8000dae:	9307      	strlt	r3, [sp, #28]
 8000db0:	bfb8      	it	lt
 8000db2:	9204      	strlt	r2, [sp, #16]
 8000db4:	7823      	ldrb	r3, [r4, #0]
 8000db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000db8:	d10a      	bne.n	8000dd0 <_svfiprintf_r+0x130>
 8000dba:	7863      	ldrb	r3, [r4, #1]
 8000dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dbe:	d132      	bne.n	8000e26 <_svfiprintf_r+0x186>
 8000dc0:	9b03      	ldr	r3, [sp, #12]
 8000dc2:	3402      	adds	r4, #2
 8000dc4:	1d1a      	adds	r2, r3, #4
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	9203      	str	r2, [sp, #12]
 8000dca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dce:	9305      	str	r3, [sp, #20]
 8000dd0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000e88 <_svfiprintf_r+0x1e8>
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	4650      	mov	r0, sl
 8000dd8:	7821      	ldrb	r1, [r4, #0]
 8000dda:	f000 fa17 	bl	800120c <memchr>
 8000dde:	b138      	cbz	r0, 8000df0 <_svfiprintf_r+0x150>
 8000de0:	2240      	movs	r2, #64	@ 0x40
 8000de2:	9b04      	ldr	r3, [sp, #16]
 8000de4:	eba0 000a 	sub.w	r0, r0, sl
 8000de8:	4082      	lsls	r2, r0
 8000dea:	4313      	orrs	r3, r2
 8000dec:	3401      	adds	r4, #1
 8000dee:	9304      	str	r3, [sp, #16]
 8000df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000df4:	2206      	movs	r2, #6
 8000df6:	4825      	ldr	r0, [pc, #148]	@ (8000e8c <_svfiprintf_r+0x1ec>)
 8000df8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000dfc:	f000 fa06 	bl	800120c <memchr>
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d036      	beq.n	8000e72 <_svfiprintf_r+0x1d2>
 8000e04:	4b22      	ldr	r3, [pc, #136]	@ (8000e90 <_svfiprintf_r+0x1f0>)
 8000e06:	bb1b      	cbnz	r3, 8000e50 <_svfiprintf_r+0x1b0>
 8000e08:	9b03      	ldr	r3, [sp, #12]
 8000e0a:	3307      	adds	r3, #7
 8000e0c:	f023 0307 	bic.w	r3, r3, #7
 8000e10:	3308      	adds	r3, #8
 8000e12:	9303      	str	r3, [sp, #12]
 8000e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e16:	4433      	add	r3, r6
 8000e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e1a:	e76a      	b.n	8000cf2 <_svfiprintf_r+0x52>
 8000e1c:	460c      	mov	r4, r1
 8000e1e:	2001      	movs	r0, #1
 8000e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e24:	e7a8      	b.n	8000d78 <_svfiprintf_r+0xd8>
 8000e26:	2300      	movs	r3, #0
 8000e28:	f04f 0c0a 	mov.w	ip, #10
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	3401      	adds	r4, #1
 8000e30:	9305      	str	r3, [sp, #20]
 8000e32:	4620      	mov	r0, r4
 8000e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e38:	3a30      	subs	r2, #48	@ 0x30
 8000e3a:	2a09      	cmp	r2, #9
 8000e3c:	d903      	bls.n	8000e46 <_svfiprintf_r+0x1a6>
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0c6      	beq.n	8000dd0 <_svfiprintf_r+0x130>
 8000e42:	9105      	str	r1, [sp, #20]
 8000e44:	e7c4      	b.n	8000dd0 <_svfiprintf_r+0x130>
 8000e46:	4604      	mov	r4, r0
 8000e48:	2301      	movs	r3, #1
 8000e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e4e:	e7f0      	b.n	8000e32 <_svfiprintf_r+0x192>
 8000e50:	ab03      	add	r3, sp, #12
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	462a      	mov	r2, r5
 8000e56:	4638      	mov	r0, r7
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <_svfiprintf_r+0x1f4>)
 8000e5a:	a904      	add	r1, sp, #16
 8000e5c:	f3af 8000 	nop.w
 8000e60:	1c42      	adds	r2, r0, #1
 8000e62:	4606      	mov	r6, r0
 8000e64:	d1d6      	bne.n	8000e14 <_svfiprintf_r+0x174>
 8000e66:	89ab      	ldrh	r3, [r5, #12]
 8000e68:	065b      	lsls	r3, r3, #25
 8000e6a:	f53f af2d 	bmi.w	8000cc8 <_svfiprintf_r+0x28>
 8000e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e70:	e72c      	b.n	8000ccc <_svfiprintf_r+0x2c>
 8000e72:	ab03      	add	r3, sp, #12
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	462a      	mov	r2, r5
 8000e78:	4638      	mov	r0, r7
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <_svfiprintf_r+0x1f4>)
 8000e7c:	a904      	add	r1, sp, #16
 8000e7e:	f000 f87d 	bl	8000f7c <_printf_i>
 8000e82:	e7ed      	b.n	8000e60 <_svfiprintf_r+0x1c0>
 8000e84:	080012db 	.word	0x080012db
 8000e88:	080012e1 	.word	0x080012e1
 8000e8c:	080012e5 	.word	0x080012e5
 8000e90:	00000000 	.word	0x00000000
 8000e94:	08000be9 	.word	0x08000be9

08000e98 <_printf_common>:
 8000e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e9c:	4616      	mov	r6, r2
 8000e9e:	4698      	mov	r8, r3
 8000ea0:	688a      	ldr	r2, [r1, #8]
 8000ea2:	690b      	ldr	r3, [r1, #16]
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	bfb8      	it	lt
 8000eaa:	4613      	movlt	r3, r2
 8000eac:	6033      	str	r3, [r6, #0]
 8000eae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000eb2:	460c      	mov	r4, r1
 8000eb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000eb8:	b10a      	cbz	r2, 8000ebe <_printf_common+0x26>
 8000eba:	3301      	adds	r3, #1
 8000ebc:	6033      	str	r3, [r6, #0]
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	0699      	lsls	r1, r3, #26
 8000ec2:	bf42      	ittt	mi
 8000ec4:	6833      	ldrmi	r3, [r6, #0]
 8000ec6:	3302      	addmi	r3, #2
 8000ec8:	6033      	strmi	r3, [r6, #0]
 8000eca:	6825      	ldr	r5, [r4, #0]
 8000ecc:	f015 0506 	ands.w	r5, r5, #6
 8000ed0:	d106      	bne.n	8000ee0 <_printf_common+0x48>
 8000ed2:	f104 0a19 	add.w	sl, r4, #25
 8000ed6:	68e3      	ldr	r3, [r4, #12]
 8000ed8:	6832      	ldr	r2, [r6, #0]
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	42ab      	cmp	r3, r5
 8000ede:	dc2b      	bgt.n	8000f38 <_printf_common+0xa0>
 8000ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ee4:	6822      	ldr	r2, [r4, #0]
 8000ee6:	3b00      	subs	r3, #0
 8000ee8:	bf18      	it	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	0692      	lsls	r2, r2, #26
 8000eee:	d430      	bmi.n	8000f52 <_printf_common+0xba>
 8000ef0:	4641      	mov	r1, r8
 8000ef2:	4638      	mov	r0, r7
 8000ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ef8:	47c8      	blx	r9
 8000efa:	3001      	adds	r0, #1
 8000efc:	d023      	beq.n	8000f46 <_printf_common+0xae>
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	6922      	ldr	r2, [r4, #16]
 8000f02:	f003 0306 	and.w	r3, r3, #6
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf14      	ite	ne
 8000f0a:	2500      	movne	r5, #0
 8000f0c:	6833      	ldreq	r3, [r6, #0]
 8000f0e:	f04f 0600 	mov.w	r6, #0
 8000f12:	bf08      	it	eq
 8000f14:	68e5      	ldreq	r5, [r4, #12]
 8000f16:	f104 041a 	add.w	r4, r4, #26
 8000f1a:	bf08      	it	eq
 8000f1c:	1aed      	subeq	r5, r5, r3
 8000f1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000f22:	bf08      	it	eq
 8000f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	bfc4      	itt	gt
 8000f2c:	1a9b      	subgt	r3, r3, r2
 8000f2e:	18ed      	addgt	r5, r5, r3
 8000f30:	42b5      	cmp	r5, r6
 8000f32:	d11a      	bne.n	8000f6a <_printf_common+0xd2>
 8000f34:	2000      	movs	r0, #0
 8000f36:	e008      	b.n	8000f4a <_printf_common+0xb2>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4638      	mov	r0, r7
 8000f40:	47c8      	blx	r9
 8000f42:	3001      	adds	r0, #1
 8000f44:	d103      	bne.n	8000f4e <_printf_common+0xb6>
 8000f46:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	3501      	adds	r5, #1
 8000f50:	e7c1      	b.n	8000ed6 <_printf_common+0x3e>
 8000f52:	2030      	movs	r0, #48	@ 0x30
 8000f54:	18e1      	adds	r1, r4, r3
 8000f56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f60:	4422      	add	r2, r4
 8000f62:	3302      	adds	r3, #2
 8000f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f68:	e7c2      	b.n	8000ef0 <_printf_common+0x58>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4622      	mov	r2, r4
 8000f6e:	4641      	mov	r1, r8
 8000f70:	4638      	mov	r0, r7
 8000f72:	47c8      	blx	r9
 8000f74:	3001      	adds	r0, #1
 8000f76:	d0e6      	beq.n	8000f46 <_printf_common+0xae>
 8000f78:	3601      	adds	r6, #1
 8000f7a:	e7d9      	b.n	8000f30 <_printf_common+0x98>

08000f7c <_printf_i>:
 8000f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f80:	7e0f      	ldrb	r7, [r1, #24]
 8000f82:	4691      	mov	r9, r2
 8000f84:	2f78      	cmp	r7, #120	@ 0x78
 8000f86:	4680      	mov	r8, r0
 8000f88:	460c      	mov	r4, r1
 8000f8a:	469a      	mov	sl, r3
 8000f8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f92:	d807      	bhi.n	8000fa4 <_printf_i+0x28>
 8000f94:	2f62      	cmp	r7, #98	@ 0x62
 8000f96:	d80a      	bhi.n	8000fae <_printf_i+0x32>
 8000f98:	2f00      	cmp	r7, #0
 8000f9a:	f000 80d1 	beq.w	8001140 <_printf_i+0x1c4>
 8000f9e:	2f58      	cmp	r7, #88	@ 0x58
 8000fa0:	f000 80b8 	beq.w	8001114 <_printf_i+0x198>
 8000fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fac:	e03a      	b.n	8001024 <_printf_i+0xa8>
 8000fae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fb2:	2b15      	cmp	r3, #21
 8000fb4:	d8f6      	bhi.n	8000fa4 <_printf_i+0x28>
 8000fb6:	a101      	add	r1, pc, #4	@ (adr r1, 8000fbc <_printf_i+0x40>)
 8000fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fbc:	08001015 	.word	0x08001015
 8000fc0:	08001029 	.word	0x08001029
 8000fc4:	08000fa5 	.word	0x08000fa5
 8000fc8:	08000fa5 	.word	0x08000fa5
 8000fcc:	08000fa5 	.word	0x08000fa5
 8000fd0:	08000fa5 	.word	0x08000fa5
 8000fd4:	08001029 	.word	0x08001029
 8000fd8:	08000fa5 	.word	0x08000fa5
 8000fdc:	08000fa5 	.word	0x08000fa5
 8000fe0:	08000fa5 	.word	0x08000fa5
 8000fe4:	08000fa5 	.word	0x08000fa5
 8000fe8:	08001127 	.word	0x08001127
 8000fec:	08001053 	.word	0x08001053
 8000ff0:	080010e1 	.word	0x080010e1
 8000ff4:	08000fa5 	.word	0x08000fa5
 8000ff8:	08000fa5 	.word	0x08000fa5
 8000ffc:	08001149 	.word	0x08001149
 8001000:	08000fa5 	.word	0x08000fa5
 8001004:	08001053 	.word	0x08001053
 8001008:	08000fa5 	.word	0x08000fa5
 800100c:	08000fa5 	.word	0x08000fa5
 8001010:	080010e9 	.word	0x080010e9
 8001014:	6833      	ldr	r3, [r6, #0]
 8001016:	1d1a      	adds	r2, r3, #4
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6032      	str	r2, [r6, #0]
 800101c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001024:	2301      	movs	r3, #1
 8001026:	e09c      	b.n	8001162 <_printf_i+0x1e6>
 8001028:	6833      	ldr	r3, [r6, #0]
 800102a:	6820      	ldr	r0, [r4, #0]
 800102c:	1d19      	adds	r1, r3, #4
 800102e:	6031      	str	r1, [r6, #0]
 8001030:	0606      	lsls	r6, r0, #24
 8001032:	d501      	bpl.n	8001038 <_printf_i+0xbc>
 8001034:	681d      	ldr	r5, [r3, #0]
 8001036:	e003      	b.n	8001040 <_printf_i+0xc4>
 8001038:	0645      	lsls	r5, r0, #25
 800103a:	d5fb      	bpl.n	8001034 <_printf_i+0xb8>
 800103c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001040:	2d00      	cmp	r5, #0
 8001042:	da03      	bge.n	800104c <_printf_i+0xd0>
 8001044:	232d      	movs	r3, #45	@ 0x2d
 8001046:	426d      	negs	r5, r5
 8001048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800104c:	230a      	movs	r3, #10
 800104e:	4858      	ldr	r0, [pc, #352]	@ (80011b0 <_printf_i+0x234>)
 8001050:	e011      	b.n	8001076 <_printf_i+0xfa>
 8001052:	6821      	ldr	r1, [r4, #0]
 8001054:	6833      	ldr	r3, [r6, #0]
 8001056:	0608      	lsls	r0, r1, #24
 8001058:	f853 5b04 	ldr.w	r5, [r3], #4
 800105c:	d402      	bmi.n	8001064 <_printf_i+0xe8>
 800105e:	0649      	lsls	r1, r1, #25
 8001060:	bf48      	it	mi
 8001062:	b2ad      	uxthmi	r5, r5
 8001064:	2f6f      	cmp	r7, #111	@ 0x6f
 8001066:	6033      	str	r3, [r6, #0]
 8001068:	bf14      	ite	ne
 800106a:	230a      	movne	r3, #10
 800106c:	2308      	moveq	r3, #8
 800106e:	4850      	ldr	r0, [pc, #320]	@ (80011b0 <_printf_i+0x234>)
 8001070:	2100      	movs	r1, #0
 8001072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001076:	6866      	ldr	r6, [r4, #4]
 8001078:	2e00      	cmp	r6, #0
 800107a:	60a6      	str	r6, [r4, #8]
 800107c:	db05      	blt.n	800108a <_printf_i+0x10e>
 800107e:	6821      	ldr	r1, [r4, #0]
 8001080:	432e      	orrs	r6, r5
 8001082:	f021 0104 	bic.w	r1, r1, #4
 8001086:	6021      	str	r1, [r4, #0]
 8001088:	d04b      	beq.n	8001122 <_printf_i+0x1a6>
 800108a:	4616      	mov	r6, r2
 800108c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001090:	fb03 5711 	mls	r7, r3, r1, r5
 8001094:	5dc7      	ldrb	r7, [r0, r7]
 8001096:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800109a:	462f      	mov	r7, r5
 800109c:	42bb      	cmp	r3, r7
 800109e:	460d      	mov	r5, r1
 80010a0:	d9f4      	bls.n	800108c <_printf_i+0x110>
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d10b      	bne.n	80010be <_printf_i+0x142>
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	07df      	lsls	r7, r3, #31
 80010aa:	d508      	bpl.n	80010be <_printf_i+0x142>
 80010ac:	6923      	ldr	r3, [r4, #16]
 80010ae:	6861      	ldr	r1, [r4, #4]
 80010b0:	4299      	cmp	r1, r3
 80010b2:	bfde      	ittt	le
 80010b4:	2330      	movle	r3, #48	@ 0x30
 80010b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80010be:	1b92      	subs	r2, r2, r6
 80010c0:	6122      	str	r2, [r4, #16]
 80010c2:	464b      	mov	r3, r9
 80010c4:	4621      	mov	r1, r4
 80010c6:	4640      	mov	r0, r8
 80010c8:	f8cd a000 	str.w	sl, [sp]
 80010cc:	aa03      	add	r2, sp, #12
 80010ce:	f7ff fee3 	bl	8000e98 <_printf_common>
 80010d2:	3001      	adds	r0, #1
 80010d4:	d14a      	bne.n	800116c <_printf_i+0x1f0>
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295
 80010da:	b004      	add	sp, #16
 80010dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	6023      	str	r3, [r4, #0]
 80010e8:	2778      	movs	r7, #120	@ 0x78
 80010ea:	4832      	ldr	r0, [pc, #200]	@ (80011b4 <_printf_i+0x238>)
 80010ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	6831      	ldr	r1, [r6, #0]
 80010f4:	061f      	lsls	r7, r3, #24
 80010f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80010fa:	d402      	bmi.n	8001102 <_printf_i+0x186>
 80010fc:	065f      	lsls	r7, r3, #25
 80010fe:	bf48      	it	mi
 8001100:	b2ad      	uxthmi	r5, r5
 8001102:	6031      	str	r1, [r6, #0]
 8001104:	07d9      	lsls	r1, r3, #31
 8001106:	bf44      	itt	mi
 8001108:	f043 0320 	orrmi.w	r3, r3, #32
 800110c:	6023      	strmi	r3, [r4, #0]
 800110e:	b11d      	cbz	r5, 8001118 <_printf_i+0x19c>
 8001110:	2310      	movs	r3, #16
 8001112:	e7ad      	b.n	8001070 <_printf_i+0xf4>
 8001114:	4826      	ldr	r0, [pc, #152]	@ (80011b0 <_printf_i+0x234>)
 8001116:	e7e9      	b.n	80010ec <_printf_i+0x170>
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	f023 0320 	bic.w	r3, r3, #32
 800111e:	6023      	str	r3, [r4, #0]
 8001120:	e7f6      	b.n	8001110 <_printf_i+0x194>
 8001122:	4616      	mov	r6, r2
 8001124:	e7bd      	b.n	80010a2 <_printf_i+0x126>
 8001126:	6833      	ldr	r3, [r6, #0]
 8001128:	6825      	ldr	r5, [r4, #0]
 800112a:	1d18      	adds	r0, r3, #4
 800112c:	6961      	ldr	r1, [r4, #20]
 800112e:	6030      	str	r0, [r6, #0]
 8001130:	062e      	lsls	r6, r5, #24
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	d501      	bpl.n	800113a <_printf_i+0x1be>
 8001136:	6019      	str	r1, [r3, #0]
 8001138:	e002      	b.n	8001140 <_printf_i+0x1c4>
 800113a:	0668      	lsls	r0, r5, #25
 800113c:	d5fb      	bpl.n	8001136 <_printf_i+0x1ba>
 800113e:	8019      	strh	r1, [r3, #0]
 8001140:	2300      	movs	r3, #0
 8001142:	4616      	mov	r6, r2
 8001144:	6123      	str	r3, [r4, #16]
 8001146:	e7bc      	b.n	80010c2 <_printf_i+0x146>
 8001148:	6833      	ldr	r3, [r6, #0]
 800114a:	2100      	movs	r1, #0
 800114c:	1d1a      	adds	r2, r3, #4
 800114e:	6032      	str	r2, [r6, #0]
 8001150:	681e      	ldr	r6, [r3, #0]
 8001152:	6862      	ldr	r2, [r4, #4]
 8001154:	4630      	mov	r0, r6
 8001156:	f000 f859 	bl	800120c <memchr>
 800115a:	b108      	cbz	r0, 8001160 <_printf_i+0x1e4>
 800115c:	1b80      	subs	r0, r0, r6
 800115e:	6060      	str	r0, [r4, #4]
 8001160:	6863      	ldr	r3, [r4, #4]
 8001162:	6123      	str	r3, [r4, #16]
 8001164:	2300      	movs	r3, #0
 8001166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800116a:	e7aa      	b.n	80010c2 <_printf_i+0x146>
 800116c:	4632      	mov	r2, r6
 800116e:	4649      	mov	r1, r9
 8001170:	4640      	mov	r0, r8
 8001172:	6923      	ldr	r3, [r4, #16]
 8001174:	47d0      	blx	sl
 8001176:	3001      	adds	r0, #1
 8001178:	d0ad      	beq.n	80010d6 <_printf_i+0x15a>
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	079b      	lsls	r3, r3, #30
 800117e:	d413      	bmi.n	80011a8 <_printf_i+0x22c>
 8001180:	68e0      	ldr	r0, [r4, #12]
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	4298      	cmp	r0, r3
 8001186:	bfb8      	it	lt
 8001188:	4618      	movlt	r0, r3
 800118a:	e7a6      	b.n	80010da <_printf_i+0x15e>
 800118c:	2301      	movs	r3, #1
 800118e:	4632      	mov	r2, r6
 8001190:	4649      	mov	r1, r9
 8001192:	4640      	mov	r0, r8
 8001194:	47d0      	blx	sl
 8001196:	3001      	adds	r0, #1
 8001198:	d09d      	beq.n	80010d6 <_printf_i+0x15a>
 800119a:	3501      	adds	r5, #1
 800119c:	68e3      	ldr	r3, [r4, #12]
 800119e:	9903      	ldr	r1, [sp, #12]
 80011a0:	1a5b      	subs	r3, r3, r1
 80011a2:	42ab      	cmp	r3, r5
 80011a4:	dcf2      	bgt.n	800118c <_printf_i+0x210>
 80011a6:	e7eb      	b.n	8001180 <_printf_i+0x204>
 80011a8:	2500      	movs	r5, #0
 80011aa:	f104 0619 	add.w	r6, r4, #25
 80011ae:	e7f5      	b.n	800119c <_printf_i+0x220>
 80011b0:	080012ec 	.word	0x080012ec
 80011b4:	080012fd 	.word	0x080012fd

080011b8 <memmove>:
 80011b8:	4288      	cmp	r0, r1
 80011ba:	b510      	push	{r4, lr}
 80011bc:	eb01 0402 	add.w	r4, r1, r2
 80011c0:	d902      	bls.n	80011c8 <memmove+0x10>
 80011c2:	4284      	cmp	r4, r0
 80011c4:	4623      	mov	r3, r4
 80011c6:	d807      	bhi.n	80011d8 <memmove+0x20>
 80011c8:	1e43      	subs	r3, r0, #1
 80011ca:	42a1      	cmp	r1, r4
 80011cc:	d008      	beq.n	80011e0 <memmove+0x28>
 80011ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80011d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80011d6:	e7f8      	b.n	80011ca <memmove+0x12>
 80011d8:	4601      	mov	r1, r0
 80011da:	4402      	add	r2, r0
 80011dc:	428a      	cmp	r2, r1
 80011de:	d100      	bne.n	80011e2 <memmove+0x2a>
 80011e0:	bd10      	pop	{r4, pc}
 80011e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80011ea:	e7f7      	b.n	80011dc <memmove+0x24>

080011ec <_sbrk_r>:
 80011ec:	b538      	push	{r3, r4, r5, lr}
 80011ee:	2300      	movs	r3, #0
 80011f0:	4d05      	ldr	r5, [pc, #20]	@ (8001208 <_sbrk_r+0x1c>)
 80011f2:	4604      	mov	r4, r0
 80011f4:	4608      	mov	r0, r1
 80011f6:	602b      	str	r3, [r5, #0]
 80011f8:	f7ff fb52 	bl	80008a0 <_sbrk>
 80011fc:	1c43      	adds	r3, r0, #1
 80011fe:	d102      	bne.n	8001206 <_sbrk_r+0x1a>
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	b103      	cbz	r3, 8001206 <_sbrk_r+0x1a>
 8001204:	6023      	str	r3, [r4, #0]
 8001206:	bd38      	pop	{r3, r4, r5, pc}
 8001208:	200001a8 	.word	0x200001a8

0800120c <memchr>:
 800120c:	4603      	mov	r3, r0
 800120e:	b510      	push	{r4, lr}
 8001210:	b2c9      	uxtb	r1, r1
 8001212:	4402      	add	r2, r0
 8001214:	4293      	cmp	r3, r2
 8001216:	4618      	mov	r0, r3
 8001218:	d101      	bne.n	800121e <memchr+0x12>
 800121a:	2000      	movs	r0, #0
 800121c:	e003      	b.n	8001226 <memchr+0x1a>
 800121e:	7804      	ldrb	r4, [r0, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	428c      	cmp	r4, r1
 8001224:	d1f6      	bne.n	8001214 <memchr+0x8>
 8001226:	bd10      	pop	{r4, pc}

08001228 <memcpy>:
 8001228:	440a      	add	r2, r1
 800122a:	4291      	cmp	r1, r2
 800122c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001230:	d100      	bne.n	8001234 <memcpy+0xc>
 8001232:	4770      	bx	lr
 8001234:	b510      	push	{r4, lr}
 8001236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800123a:	4291      	cmp	r1, r2
 800123c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001240:	d1f9      	bne.n	8001236 <memcpy+0xe>
 8001242:	bd10      	pop	{r4, pc}

08001244 <_realloc_r>:
 8001244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001248:	4607      	mov	r7, r0
 800124a:	4614      	mov	r4, r2
 800124c:	460d      	mov	r5, r1
 800124e:	b921      	cbnz	r1, 800125a <_realloc_r+0x16>
 8001250:	4611      	mov	r1, r2
 8001252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001256:	f7ff bc3b 	b.w	8000ad0 <_malloc_r>
 800125a:	b92a      	cbnz	r2, 8001268 <_realloc_r+0x24>
 800125c:	f7ff fbce 	bl	80009fc <_free_r>
 8001260:	4625      	mov	r5, r4
 8001262:	4628      	mov	r0, r5
 8001264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001268:	f000 f81a 	bl	80012a0 <_malloc_usable_size_r>
 800126c:	4284      	cmp	r4, r0
 800126e:	4606      	mov	r6, r0
 8001270:	d802      	bhi.n	8001278 <_realloc_r+0x34>
 8001272:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001276:	d8f4      	bhi.n	8001262 <_realloc_r+0x1e>
 8001278:	4621      	mov	r1, r4
 800127a:	4638      	mov	r0, r7
 800127c:	f7ff fc28 	bl	8000ad0 <_malloc_r>
 8001280:	4680      	mov	r8, r0
 8001282:	b908      	cbnz	r0, 8001288 <_realloc_r+0x44>
 8001284:	4645      	mov	r5, r8
 8001286:	e7ec      	b.n	8001262 <_realloc_r+0x1e>
 8001288:	42b4      	cmp	r4, r6
 800128a:	4622      	mov	r2, r4
 800128c:	4629      	mov	r1, r5
 800128e:	bf28      	it	cs
 8001290:	4632      	movcs	r2, r6
 8001292:	f7ff ffc9 	bl	8001228 <memcpy>
 8001296:	4629      	mov	r1, r5
 8001298:	4638      	mov	r0, r7
 800129a:	f7ff fbaf 	bl	80009fc <_free_r>
 800129e:	e7f1      	b.n	8001284 <_realloc_r+0x40>

080012a0 <_malloc_usable_size_r>:
 80012a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012a4:	1f18      	subs	r0, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bfbc      	itt	lt
 80012aa:	580b      	ldrlt	r3, [r1, r0]
 80012ac:	18c0      	addlt	r0, r0, r3
 80012ae:	4770      	bx	lr

080012b0 <_init>:
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b2:	bf00      	nop
 80012b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b6:	bc08      	pop	{r3}
 80012b8:	469e      	mov	lr, r3
 80012ba:	4770      	bx	lr

080012bc <_fini>:
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012be:	bf00      	nop
 80012c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c2:	bc08      	pop	{r3}
 80012c4:	469e      	mov	lr, r3
 80012c6:	4770      	bx	lr
